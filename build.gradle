buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    ext.versions = [
        'coroutines': '1.2.1',
        'dokka': '0.9.18',
        'kotlin': '1.3.31',
        'stately': '0.7.2'
    ]

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokka}"
    }
}

repositories {
    google()
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    mavenCentral()
}

apply plugin: 'kotlin-multiplatform'
apply plugin: 'maven-publish'
apply plugin: 'signing'

import org.jetbrains.kotlin.konan.target.HostManager

kotlin {
    targets {
        jvm()
        iosX64()
        iosArm64()
        mingwX64()
    }
    sourceSets {
        iosX64Main { kotlin.srcDirs += 'src/nativeMain/kotlin' }
        iosX64Test { kotlin.srcDirs += 'src/nativeTest/kotlin' }
        iosArm64Main { kotlin.srcDirs += 'src/nativeMain/kotlin' }
        iosArm64Test { kotlin.srcDirs += 'src/nativeTest/kotlin' }
        mingwX64Main { kotlin.srcDirs += 'src/nativeMain/kotlin' }
        mingwX64Test { kotlin.srcDirs += 'src/nativeTest/kotlin' }
    }
    jvm {
        compilations.main.kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:${versions.kotlin}"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${versions.coroutines}"
                implementation "co.touchlab:stately:${versions.stately}"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common:${versions.kotlin}"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${versions.coroutines}"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:${versions.kotlin}"
                implementation "co.touchlab:stately:${versions.stately}"
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
            }
        }
        jvmTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test:${versions.kotlin}"
                implementation "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"
            }
        }
        iosX64Main {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${versions.coroutines}"
            }
        }
        iosArm64Main {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${versions.coroutines}"
            }
        }
        mingwX64Main {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${versions.coroutines}"
            }
        }
    }
}

// iOS Test Runner

def simulatorName = 'iPad Air 2'
def testExeTask = linkTestDebugExecutableIosX64

if (HostManager.hostIsMac) {
    tasks.register("testIos", Exec) {
        group = "verification"
        dependsOn testExeTask
        executable 'xcrun'
        args = [
                'simctl',
                'spawn',
                simulatorName,
                testExeTask.outputFile.get()
        ]
    }

    check.configure {
        dependsOn 'testIos'
    }
}

configurations {
    compileClasspath
    ktlint
}

dependencies {
    ktlint "com.pinterest:ktlint:0.32.0"
}

def ktlint = tasks.register("ktlint", JavaExec) {
    group = "verification"
    def ktlint_args = project.findProperty('ktlint_args') ?: "--reporter=plain?group_by_file --reporter=checkstyle,output=${buildDir}/ktlint.xml src/**/*.kt"
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args ktlint_args.split()
}

check.configure {
    dependsOn ktlint
}

tasks.register("ktlintFormat", JavaExec) {
    group = "formatting"
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}

apply from: 'publish.gradle'
